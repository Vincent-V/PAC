#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>

#include "md5.h"
#include "coll.h"



static void MDPrint (unsigned char digest[16]) {
  int i;

  for (i = 0; i < 16; i++)
    printf ("%02x", digest[i]);
}

static void MDFile (char *filename) {
  FILE *file;
  MD5_CTX context;
  int len, i;
  unsigned char buffer[1024], digest[16];

  if ((file = fopen (filename, "rb")) == NULL)
    printf ("%s can't be opened\n", filename);
  else {
    MD5Init (&context);
    while ( (len = fread (buffer, 1, 1024, file)) )
      MD5Update (&context, buffer, len);
    MD5Final (digest, &context);

    fclose (file);

    printf ("MD5 (%s) = ", filename);
    MDPrint( digest );
    printf ("\n");
  }
}

static void MDQ1 (char *filename){
  FILE *file,*file_a,*file_b;
  MD5_CTX context;
  int len, i;
  unsigned char buffer[64];
  uint32_t blockA0[16], blockA1[16], blockB0[16], blockB1[16];

  if ((file = fopen (filename, "rb")) == NULL){
    printf ("%s can't be opened\n", filename);
    exit(EXIT_FAILURE);
  }
  else {
    MD5Init (&context);
    while ( (len = fread (buffer, 1, 64, file)) )
      MD5Update (&context, buffer, len);
      
    fclose (file);
    if(len!=0){
      printf("Taille fichier non multiple de 64 (taille: %d )\n",len);
      exit(EXIT_FAILURE);
    }
    find_collision(context.state, blockA0, blockA1, blockB0, blockB1, 1);
    
    file_a = fopen ("fichier_a", "w");
    file_b = fopen ("fichier_b", "w");
    if(!file_a || !file_b){
      printf ("fichier_a ou fichier_b impossible Ã  creer/ouvrir");
      exit(EXIT_FAILURE);
    }
    
    fwrite(blockA0, sizeof(uint32_t), 16, file_a);
    fwrite(blockA1, sizeof(uint32_t), 16, file_a);
    
    fwrite(blockB0, sizeof(uint32_t), 16, file_b);
    fwrite(blockB1, sizeof(uint32_t), 16, file_b);
    

  }
}

int main (int argc, char **argv) {

  
  
  if (argc > 1)
    MDQ1 (argv[1]);
    //MDFile (argv[1]); // on calcule l'empreinte du fichier en argument...
  else {              // ...ou bien on fabrique une collision !
    MD5_CTX context;
    MD5Init( &context );
    uint32_t blockA0[16], blockA1[16], blockB0[16], blockB1[16];
    find_collision(context.state, blockA0, blockA1, blockB0, blockB1, 1);
  }

  return 0;
}

